[tox]
envlist =
    tests
    linting
    coverage
    type_check
skip_missing_interpreters = True
skipsdist = True

[testenv]
commands = python -m pip install --upgrade pip

[testenv:tests]
# the tests environment is called by the Github action that runs the unit tests
usedevelop = True
deps =
    -rrequirements.txt
    pytest
    pytest-datafiles
commands = python -m pytest --basetemp={envtmpdir} {posargs}

[testenv:linting]
# the linting environment is called by the Github Action that runs the linter
deps =
    -rrequirements.txt
    pylint
# add your fixtures like e.g. pytest_datafiles here
commands =
    pylint src/maus
# add single files (ending with .py) or packages here

[testenv:type_check]
# the type_check environment checks the type hints using mypy
usedevelop = True
deps =
    -rrequirements.txt
    mypy
commands =
    mypy --show-error-codes src/maus
    mypy --show-error-codes unittests
# add single files (ending with .py) or packages here

[testenv:coverage]
# the coverage environment is called by the Github Action that runs the coverage measurement
usedevelop = True
deps =
    {[testenv:tests]deps}
    coverage
commands =
    coverage run -m pytest --basetemp={envtmpdir} {posargs}
    coverage html --omit .tox/*,unittests/*
    coverage report --fail-under 80 --omit .tox/*,unittests/*


[testenv:dev]
# the dev environment contains everything you need to start developing on your local machine.
deps =
    {[testenv:tests]deps}
    {[testenv:linting]deps}
    {[testenv:type_check]deps}
    {[testenv:docs]deps}
    {[testenv:coverage]deps}
    {[testenv:json_schemas]deps}
    black
    isort
    pip-tools
    pre-commit
commands =
    python -m pip install --upgrade pip
    pip-compile requirements.in
    pip install -r requirements.txt
    pre-commit install

[testenv:test_packaging]
skip_install = true
deps =
    setuptools
    setuptools-scm
    wheel
    twine
commands =
    python setup.py sdist bdist_wheel
    twine check dist/*

[testenv:docs]
usedevelop = True
deps =
    -rrequirements.txt
    Sphinx
    sphinx_rtd_theme
commands =
    sphinx-build -W -b html -d {envtmpdir}/doctrees docs {envtmpdir}/html
    sphinx-build -n -T -W -b doctest -d {envtmpdir}/doctrees docs docs/_build/html
    python -m doctest README.rst

[testenv:json_schemas]
usedevelop = True
deps =
    -rrequirements.txt
    marshmallow_jsonschema
commands =
    python json_schemas/generate_json_schemas.py
