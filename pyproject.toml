[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[project]
name = "maus"
description = "Python Library that consolidates AnwendungshandbÃ¼cher (AHB) and Message Implementation Guides (MIG)"
# ERROR    `long_description` has syntax errors in markup and would not be rendered on PyPI.
#         line 51: Error: Unexpected indentation.
long_description = "file: README.rst"
long_description_content_type = "text/x-rst; charset=UTF-8"
url = "https://github.com/Hochfrequenz/mig_ahb_utility_stack"
license = { text = "MIT" }
requires-python = ">=3.8"
authors = [
    { name = "Hochfrequenz Unternehmensberatung GmbH", email = "info@hochfrequenz.de" }
]
keywords = ["MIG", "AHB", "maus", "edi@energy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "attrs>=21.4.0",
    "marshmallow>=3.18.0",
    "more_itertools",
    "xmltodict"
    # add everything you add in requirements.in here
]
dynamic = ["readme", "version"]

[options]
package_dir = ""
packages = [
    { name = ".", path = "src" },
]
zip_safe = false
include_package_data = true
python_requires = ">=3.8"
install_requires = [
    "attrs>=21.4.0",
    "marshmallow>=3.18.0",
    "more_itertools",
]

[options.extras]
xml = [
    "lxml>=4.9.2",
    "xmltodict",
]
[package]
include = ["py.typed"]

# wird das tool als CLI script verwendet, dann muss hier der Name des Scripts angegeben werden
# [project.scripts]
# kohlrahbi = "kohlrahbi:main"

[project.urls]
Changelog = "https://github.com/Hochfrequenz/mig_ahb_utility_stack/releases"
Homepage = "https://github.com/Hochfrequenz/mig_ahb_utility_stack"
Documentation = "https://maus.readthedocs.io/en/latest/"

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/x-rst"
fragments = [{ path = "README.rst" }]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/_powercloud2lynqtech_version.py"
template = '''
version = "{version}"
'''

[tool.hatch.build.targets.sdist]
exclude = ["/tests"]

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.setuptools_scm]

[tool.black]
line-length = 120

[tool.isort]
line_length = 120
profile = "black"

[tool.pylint."MESSAGES CONTROL"]
max-line-length = 120
disable = "fixme"

[tool.pytest.ini_options]
# When the mode is auto, all discovered async tests are considered asyncio-driven
# even if they have no @pytest.mark.asyncio marker.
# https://github.com/pytest-dev/pytest-asyncio#auto-mode
asyncio_mode = "auto"

